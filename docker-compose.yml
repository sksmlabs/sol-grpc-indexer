services:
  # =========================
  # Kafka (Bitnami, KRaft)
  # =========================
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"   # host access
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT_HOST://:9092,PLAINTEXT_INTERNAL://:29092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT_HOST://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks: [knet]
    volumes:
      - kafka_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092  # internal listener
    depends_on:
      - kafka
    networks: [knet]

  # =========================
  # Your TypeScript app
  # =========================
  app:
    build:
      context: .
      dockerfile: Dockerfile        # or Dockerfile.dev for hot reload
    env_file: .env
    depends_on:
      kafka:
        condition: service_started      # Bitnami image has no robust healthcheck
    networks: [knet]
    # Dev hot-reload? uncomment:
    # volumes:
    #   - ./:/app
    #   - /app/node_modules
    # command: ["npx","ts-node-dev","--respawn","--transpileOnly","src/index.ts"]

  producer-sol:
    extends: { service: app }
    environment:
      MODE: "sol"
    command: ["node","dist/src/workers/producer.js"]
    restart: unless-stopped

  consumer:
    extends: { service: app }
    command: ["node","dist/src/workers/consumer.js"]
    restart: unless-stopped

networks:
  knet:

volumes:
  kafka_data:
