// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  pubkey    String   @unique
  owner     String
  lamports  BigInt
  data      String?  // Base64 encoded (legacy)
  parsedData Json?   // Structured parsed data from IDL/parsers
  executable Boolean
  rentEpoch BigInt
  slot      BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([owner])
  @@index([slot])
}

model Transaction {
  id               String   @id @default(cuid())
  signature        String   @unique
  slot             BigInt
  blockTime        DateTime?
  success          Boolean
  fee              BigInt?
  computeUnitsUsed BigInt?
  accounts         String[] // JSON array of account pubkeys
  instructions     Json[]   // Array of instruction data
  memos            Memo[]
  createdAt        DateTime @default(now())
  
  @@index([slot])
  @@index([success])
  @@index([blockTime])
}


model SlotUpdate {
  id       Int      @id @default(autoincrement())
  slot      String?   @unique
  parent    String?
  createdAt DateTime @default(now())
  
  @@index([slot])
}


model BlockUpdate {
  id                    Int      @id @default(autoincrement())
  blockhash              String?   @unique
  blockHeight            String?
  blockTime              DateTime?
  parentSlot             String?
  parentBlockhash        String
  executedTransactions   String
  updatedAccounts        String
  entries                String
  createdAt              DateTime @default(now())
  
  // @@index([blockHeight])
  @@index([parentSlot])
}

model Memo {
  id            String      @id @default(cuid())
  content       String
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  createdAt     DateTime    @default(now())
  
  @@index([content])
}

model TokenTransfer {
  id            String      @id @default(cuid())
  signature     String      @unique
  tokens        BigInt?
  fee           BigInt?
  accounts      String[] // JSON array of account pubkeys

  @@index([signature])
}